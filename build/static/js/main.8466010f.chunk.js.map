{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","utils/utils.ts","api/api.ts","components/SettingsView.tsx","components/SearchBar.tsx","components/Results.tsx","components/ListView.tsx","components/CardView.tsx","components/ContentView.tsx","components/LoadIcon.tsx","components/ErrorView.tsx","components/AuthView.tsx","utils/themeUtils.ts","App.tsx","index.tsx","ProviderWrapper.tsx"],"names":["Boolean","window","location","hostname","match","viewType","submitHandler","err","result","console","log","concat","launchTaskModule","card","content","type","taskInfo","height","undefined","width","title","preview","url","completionBotId","botId","microsoftTeams","startTask","alert","getCommandId","iUrl","queryString","query","commandId","stripHTML","html","div","document","createElement","innerHTML","textContent","innerText","getResults","request","onResults","onError","sendQuery","SettingsView","_React$useState","React","_React$useState2","Object","slicedToArray","CommandList","setCommandList","_React$useState3","_React$useState4","CommandSelected","setCommandSelected","_React$useState5","_React$useState6","TabName","setTabName","error","onGetCommandResponse","response","notifySuccess","onCommandSelection","command","contentUrl","id","isInitialRun","registerOnSaveHandler","saveEvent","setSettings","entityId","suggestedDisplayName","setValidityState","notifyAppLoaded","onBotGetCommandResponse","getSupportedCommands","react","Text","size","Input","fluid","placeholder","onChange","event","target","value","style","marginTop","Dropdown","items","map","noResultsMessage","onSelectedChange","res","find","item","RadioIcons","props","useState","Outlined","setOutlined","handleChange","List","react_default","a","Flex","styles","vAlign","Item","Button","icon","name","outline","iconOnly","text","onClick","e","Grid","viewOption","SearchBar","Query","setQuery","gap","push","RadioIcons_RadioIcons","view","newView","onViewChange","margin","input","backgroundColor","currentTarget","onKeyPress","key","onSearch","ListView","keyCount","outList","itemList","fill","Image","src","heroImageSrc","className","weight","subTitle","grow","truncated","selectable","CardView","calculateColumns","Math","floor","innerWidth","Columns","setColumns","updateColumn","useEffect","addEventListener","removeEventListener","columns","accessibility","gridBehavior","Segment","data-is-focusable","padding","borderRadius","boxShadow","column","textAlign","display","WebkitBoxOrient","WebkitLineClamp","overflow","AppStateEnum","Results","ListView_ListView","results","CardView_CardView","LoadIcon","isLoading","Loader","ErrorView","maxWidth","marginBottom","AuthView","Fragment","href","themeTypes","ContentView","ViewOption","setViewOption","Result","setResult","Render","AppState","setAppState","_React$useState7","_React$useState8","ErrorMessage","setErrorMessage","_React$useState9","_React$useState10","AuthData","setAuthData","Error","ResponseType","Auth","authResponse","data","resultsResponse","attachments","botID","previewRawPayload","hasOwnProperty","images","contentType","processQueryResponse","parseQueryResponse","onThemeChange","initialRun","Results_Results","LoadIcon_LoadIcon","ErrorView_ErrorView","message","AuthView_AuthView","customClass","SearchBar_SearchBar","Loading","ContentViewWrapper","createComponent","displayName","render","_ref","stardust","classes","ContentView_ContentView","root","App","frameContext","SettingsView_SettingsView","getTheme","theme","newTheme","mergeThemes","themes","teams","componentVariables","colorScheme","default","background2","ListItem","_ref2","background","componentStyles","_ref3","variables","_ref4","Contrast","teamsHighContrast","Dark","teamsDark","ReactDOM","initialTheme","themeUtils","themeString","Theme","setTheme","Provider","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8466010f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Flex } from '@stardust-ui/react';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface IRadioIconsProps {\r\n  onChange: (view: string) => void;\r\n  styles?: object;\r\n}\r\n\r\nexport const RadioIcons: React.FC<IRadioIconsProps> = (props: IRadioIconsProps): JSX.Element => {\r\n  // STATEHOOKS\r\n  const [Outlined, setOutlined] = React.useState(true);\r\n\r\n  // HANDLERS\r\n  const handleChange = (event: React.SyntheticEvent, items: { value: viewType }): void => {\r\n    props.onChange(items.value);\r\n    setOutlined(items.value === viewType.List);\r\n  };\r\n\r\n  return (\r\n    <Flex styles={props.styles} vAlign=\"center\">\r\n      <Flex.Item>\r\n        <Button\r\n          icon={{\r\n            name: 'menu',\r\n            outline: !Outlined,\r\n            size: 'medium',\r\n          }}\r\n          iconOnly\r\n          text\r\n          onClick={(e: React.SyntheticEvent): void => handleChange(e, { value: viewType.List })}\r\n        />\r\n      </Flex.Item>\r\n      <Flex.Item>\r\n        <Button\r\n          icon={{\r\n            name: 'gallery',\r\n            outline: Outlined,\r\n            size: 'medium',\r\n          }}\r\n          iconOnly\r\n          text\r\n          onClick={(e: React.SyntheticEvent): void => handleChange(e, { value: viewType.Grid })}\r\n        />\r\n      </Flex.Item>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\n\r\n// gets frame context from url\r\nexport const submitHandler = (err: string, result: string): void => {\r\n  console.log(`Err value: ${err}, result value : ${result}`);\r\n};\r\n\r\nexport const launchTaskModule = (card: ICard): void => {\r\n  // Only open task module if card is an Adaptive Card\r\n  if (card.content.type && card.content.type === 'AdaptiveCard') {\r\n    const taskInfo: microsoftTeams.TaskInfo = {\r\n      height: undefined,\r\n      width: 600,\r\n      title: card.preview.title,\r\n      url: undefined,\r\n      card: card.content,\r\n      completionBotId: card.botId,\r\n    };\r\n    microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n  } else {\r\n    alert(`Could not load data, card type is not supported.`);\r\n  }\r\n};\r\n\r\nexport const getCommandId = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.commandId as string;\r\n};\r\n\r\nexport const isInitialRun = (): boolean => {\r\n  const url = queryString.parseUrl(window.location.href);\r\n  return url.query.initialRun != null && url.query.initialRun == 'true';\r\n};\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.frameContext as string;\r\n};\r\n\r\nexport const processQueryResponse = (item: microsoftTeams.bot.Attachment, botID: string): ICard => {\r\n  let url = '';\r\n  if (item.previewRawPayload.content.hasOwnProperty('images')) {\r\n    if (\r\n      item.previewRawPayload.content.images &&\r\n      item.previewRawPayload.content.images[0] &&\r\n      item.previewRawPayload.content.images[0].url\r\n    )\r\n      url = item.previewRawPayload.content.images[0].url;\r\n  }\r\n  const out: ICard = {\r\n    contentType: 'AdaptiveCard',\r\n    content: item.card.content,\r\n    preview: {\r\n      title: item.previewRawPayload.content.title,\r\n      subTitle: item.previewRawPayload.content.text,\r\n      heroImageSrc: url,\r\n    },\r\n    botId: botID,\r\n  };\r\n  return out;\r\n};\r\n\r\n// converts a bot response to ICard\r\nexport const parseQueryResponse = (response: microsoftTeams.bot.Results): ICard[] => {\r\n  if (response && response.attachments) {\r\n    return response.attachments.map(\r\n      (item: microsoftTeams.bot.Attachment): ICard => processQueryResponse(item, response.botId),\r\n    );\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to strip HTML tags from data\r\nexport const stripHTML = (html: string): string => {\r\n  let div = document.createElement('div');\r\n  div.innerHTML = html;\r\n  return div.textContent || div.innerText || '';\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport * as adaptiveCards from 'adaptivecards';\r\nimport { ISubmitAction, IOpenUrlAction, IShowCardAction } from 'adaptivecards/lib/schema';\r\n\r\nexport const getResults = (\r\n  request: microsoftTeams.bot.QueryRequest,\r\n  onResults: (response: microsoftTeams.bot.QueryResponse) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.sendQuery(request, onResults, onError);\r\n};\r\n\r\nexport const getSupportedCommands = (\r\n  onBotGetCommandResponse: (response: microsoftTeams.bot.Command[]) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.getSupportedCommands(onBotGetCommandResponse, onError);\r\n};\r\n\r\nexport const removeUnsupportedActions = (card: adaptiveCards.IAdaptiveCard): adaptiveCards.IAdaptiveCard => {\r\n  const SupportedActions: string[] = ['Action.OpenUrl', 'Action.Submit', 'Action.ShowCard', 'invoke', 'signin'];\r\n  let newCard = card;\r\n  if (card.actions) {\r\n    newCard.actions = card.actions.filter((item: ISubmitAction | IOpenUrlAction | IShowCardAction): boolean => {\r\n      return SupportedActions.includes(item.type);\r\n    });\r\n  }\r\n  return newCard;\r\n};\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { getSupportedCommands } from '../api/api';\r\n\r\nexport const SettingsView: React.FC = (): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [CommandList, setCommandList] = React.useState([] as microsoftTeams.bot.Command[]);\r\n  const [CommandSelected, setCommandSelected] = React.useState('');\r\n  const [TabName, setTabName] = React.useState('JSONTabDefault');\r\n  // HANDLERS\r\n  const onError = (error: string): void => {\r\n    alert(error);\r\n  };\r\n\r\n  const onGetCommandResponse = (response: microsoftTeams.bot.Command[]): void => {\r\n    setCommandList(response);\r\n    microsoftTeams.appInitialization.notifySuccess();\r\n  };\r\n\r\n  const handleNameChange = (event: any): void => {\r\n    setTabName(event.target.value);\r\n  };\r\n\r\n  const handleCommandChange = (event: any, res: any): void => {\r\n    const command = CommandList.find(\r\n      (item: microsoftTeams.bot.Command): boolean => item.title === res.value,\r\n    ) as microsoftTeams.bot.Command;\r\n    if (command) {\r\n      onCommandSelection(command);\r\n    }\r\n  };\r\n\r\n  const onCommandSelection = (command: microsoftTeams.bot.Command): void => {\r\n    setCommandSelected(command.id);\r\n    let contentUrl: string;\r\n    if (command.isInitialRun) {\r\n      contentUrl = `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${CommandSelected}&initialRun=${command.isInitialRun}`;\r\n    } else {\r\n      contentUrl = `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${CommandSelected}`;\r\n    }\r\n\r\n    microsoftTeams.settings.registerOnSaveHandler((saveEvent: microsoftTeams.settings.SaveEvent): void => {\r\n      microsoftTeams.settings.setSettings({\r\n        entityId: 'JSONTab',\r\n        contentUrl: contentUrl,\r\n        suggestedDisplayName: TabName,\r\n      });\r\n      saveEvent.notifySuccess();\r\n    });\r\n    microsoftTeams.settings.setValidityState(true);\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    getSupportedCommands(onGetCommandResponse, onError);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Text size={'medium'} content={'Name your tab'} />\r\n      </div>\r\n      <Input fluid placeholder={'Tab name'} onChange={handleNameChange} />\r\n      <div style={{ marginTop: '16px' }}>\r\n        <Text size={'medium'} content={\"Select the command you'd like query your bot with\"} />\r\n      </div>\r\n      <Dropdown\r\n        fluid\r\n        items={CommandList.map((command: microsoftTeams.bot.Command): string => {\r\n          return command.title;\r\n        })}\r\n        noResultsMessage=\"We couldn't find any matches.\"\r\n        onSelectedChange={handleCommandChange}\r\n        placeholder=\"Select the command\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Input, Button, Icon, Image, Flex, Header } from '@stardust-ui/react';\r\nimport { RadioIcons } from './RadioIcons';\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface ISearchBarProps {\r\n  onSearch: (query: string) => void;\r\n  onViewChange: (view: viewType) => void;\r\n}\r\n\r\nexport const SearchBar: React.FC<ISearchBarProps> = (props: ISearchBarProps): JSX.Element => {\r\n  // HOOKS\r\n  const [Query, setQuery] = React.useState('');\r\n\r\n  // HANDLERS\r\n  const handleOnChange = (event: React.SyntheticEvent<HTMLElement>): void => {\r\n    setQuery((event as React.SyntheticEvent<HTMLInputElement>).currentTarget.value);\r\n  };\r\n\r\n  const handleOnClick = (): void => {\r\n    props.onSearch(Query);\r\n  };\r\n\r\n  const handleRadioButtonChange = (view: string): void => {\r\n    const newView = view === viewType.List ? viewType.List : viewType.Grid;\r\n    props.onViewChange(newView);\r\n  };\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (event.key === 'Enter') {\r\n      props.onSearch(Query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex gap=\"gap.small\" vAlign=\"center\">\r\n      <Flex.Item push>\r\n        <Flex>\r\n          <RadioIcons onChange={handleRadioButtonChange} styles={{ margin: '0 0 16px 0' }} />\r\n        </Flex>\r\n      </Flex.Item>\r\n      <Input\r\n        placeholder=\"Search\"\r\n        icon={{\r\n          name: 'search',\r\n          outline: true,\r\n        }}\r\n        input={{\r\n          styles: { backgroundColor: 'white', width: '250px' },\r\n        }}\r\n        styles={{ margin: '0px 0px 16px 0px' }}\r\n        onChange={handleOnChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { ListView } from './ListView';\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n}\r\nenum viewOption {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\nexport const Results: React.FC<IResultState> = (props: IResultState): JSX.Element => {\r\n  return (\r\n    <div>\r\n      {props.viewOption === viewOption.List ? (\r\n        <ListView itemList={props.results} />\r\n      ) : (\r\n        <CardView itemList={props.results} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { List, Image, Flex, Text } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule, stripHTML } from '../utils/utils';\r\n\r\nexport interface IItemListProps {\r\n  itemList: ICard[];\r\n}\r\n\r\nexport interface IProcessedItem {\r\n  key: number;\r\n  content: JSX.Element;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const ListView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // Key count to ensure unique keys for every item\r\n  let keyCount = 0;\r\n\r\n  // Function to translate items from IPreviewCard to List.Item format\r\n  const processItem = (item: ICard): IProcessedItem => {\r\n    keyCount++;\r\n    const out = {\r\n      key: keyCount,\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item styles={{ width: '32px', height: '100%' }}>\r\n            <Image src={item.preview.heroImageSrc} className=\"listItemImage\" />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.medium\">\r\n            <Text size=\"medium\" weight=\"semibold\" content={stripHTML(item.preview.title)} />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.medium\">\r\n            <Text size=\"medium\" weight=\"regular\" content={stripHTML('SUBTITLE HERE')} />\r\n          </Flex.Item>\r\n          {item.preview.subTitle ? (\r\n            <Flex.Item grow size=\"size.half\">\r\n              <Text truncated size=\"medium\" weight=\"regular\" content={stripHTML(item.preview.subTitle)} />\r\n            </Flex.Item>\r\n          ) : null}\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '2px 2px 0 0' },\r\n      onClick: (): void => launchTaskModule(item),\r\n    };\r\n    return out;\r\n  };\r\n\r\n  // Output List for processed data\r\n  // Call processing function on all items\r\n  const outList = props.itemList.map(processItem);\r\n\r\n  // Render selectable list\r\n  return (\r\n    <div>\r\n      <List selectable items={outList} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Flex, Grid, Segment, Image, Header, Icon, Text, Button, gridBehavior } from '@stardust-ui/react';\r\nimport { IItemListProps } from './ListView';\r\nimport { ICard } from '../api/api.interface';\r\nimport { stripHTML, launchTaskModule } from '../utils/utils';\r\nimport '../css/App.css';\r\n\r\nexport const CardView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const minimumCardWidth = 278; //px\r\n\r\n  // HELPER FUNCTION\r\n  const calculateColumns = (width: number) => {\r\n    return Math.floor(width / minimumCardWidth);\r\n  };\r\n\r\n  // STATE HOOKS\r\n  const [Columns, setColumns] = React.useState(calculateColumns(window.innerWidth));\r\n\r\n  // HANDLERS\r\n  const updateColumn = () => {\r\n    setColumns(calculateColumns(window.innerWidth));\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateColumn);\r\n    return () => {\r\n      window.removeEventListener('resize', updateColumn);\r\n    };\r\n  }, [Columns]);\r\n\r\n  // ICARD PROCESSOR\r\n  const processItem = (item: ICard): JSX.Element => {\r\n    return (\r\n      <Segment\r\n        data-is-focusable=\"true\"\r\n        styles={{\r\n          margin: '0 0 16px 12px',\r\n          height: '146px',\r\n          padding: '20px 20px 20px 20px',\r\n          borderRadius: '3px',\r\n          boxShadow: '0px 2px 4px -0.75px rgba(0,0,0,0.1)',\r\n        }}\r\n        onClick={(): void => launchTaskModule(item)}\r\n      >\r\n        <Flex gap=\"gap.small\">\r\n          <Flex.Item>\r\n            <Image\r\n              styles={{ width: '48px', height: '100%' }}\r\n              src={item.preview.heroImageSrc}\r\n              className=\"listItemImage\"\r\n            />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.half\" grow>\r\n            <Flex column styles={{ textAlign: 'left' }}>\r\n              <Flex.Item>\r\n                <Text\r\n                  content={stripHTML(item.preview.title)}\r\n                  styles={{ margin: '0 0 2px 0' }}\r\n                  size=\"medium\"\r\n                  weight=\"bold\"\r\n                />\r\n              </Flex.Item>\r\n              <Flex.Item>\r\n                <Text\r\n                  content={stripHTML('SUBTITLE HERE')}\r\n                  styles={{ margin: '0 0 2px 0' }}\r\n                  size=\"smaller\"\r\n                  weight=\"semilight\"\r\n                />\r\n              </Flex.Item>\r\n              {item.preview.subTitle ? (\r\n                <Flex.Item\r\n                  grow\r\n                  size=\"size.half\"\r\n                  styles={{\r\n                    display: '-webkit-box',\r\n                    WebkitBoxOrient: 'vertical',\r\n                    WebkitLineClamp: 4,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  <Text content={stripHTML(item.preview.subTitle)} weight=\"regular\" size=\"small\" />\r\n                </Flex.Item>\r\n              ) : null}\r\n            </Flex>\r\n          </Flex.Item>\r\n        </Flex>\r\n      </Segment>\r\n    );\r\n  };\r\n\r\n  // RENDER\r\n  return (\r\n    <div style={{ margin: '0 0 0 8px' }}>\r\n      <Grid columns={Columns} accessibility={gridBehavior} content={props.itemList.map(processItem)} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { SearchBar } from './SearchBar';\r\nimport { Results } from './Results';\r\nimport { LoadIcon } from './LoadIcon';\r\nimport { ErrorView } from './ErrorView';\r\nimport { AuthView } from './AuthView';\r\n\r\nimport { getResults } from '../api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport { isInitialRun, parseQueryResponse, getCommandId } from '../utils/utils';\r\nimport { createComponent } from '@stardust-ui/react';\r\n\r\n// handlers\r\nexport interface IContentViewProps {\r\n  onThemeChange: (theme: string) => void;\r\n  customClass: string;\r\n}\r\n\r\nenum AppStateEnum {\r\n  Loading = 'Loading',\r\n  Error = 'Error',\r\n  Render = 'Render',\r\n  Auth = 'Auth',\r\n}\r\n\r\nexport const ContentView: React.FC<IContentViewProps> = (props: IContentViewProps): JSX.Element => {\r\n  // state hooks\r\n  const [ViewOption, setViewOption] = React.useState('List');\r\n  const [Result, setResult] = React.useState([] as ICard[]);\r\n  const [AppState, setAppState] = React.useState(AppStateEnum.Render);\r\n  const [ErrorMessage, setErrorMessage] = React.useState('Hmm... Something went wrong...');\r\n  const [AuthData, setAuthData] = React.useState({ url: '', title: 'Sign in' });\r\n\r\n  const onError = (error: string): void => {\r\n    setAppState(AppStateEnum.Error);\r\n    setErrorMessage(error);\r\n  };\r\n\r\n  const onResults = (response: microsoftTeams.bot.QueryResponse): void => {\r\n    if (response.type === microsoftTeams.bot.ResponseType.Auth) {\r\n      const authResponse: microsoftTeams.bot.Auth = response.data as microsoftTeams.bot.Auth;\r\n      setAuthData({ url: authResponse.url, title: authResponse.title });\r\n      setAppState(AppStateEnum.Auth);\r\n    } else {\r\n      const resultsResponse: microsoftTeams.bot.Results = response.data as microsoftTeams.bot.Results;\r\n      setResult(parseQueryResponse(resultsResponse));\r\n      setAppState(AppStateEnum.Render);\r\n      microsoftTeams.appInitialization.notifySuccess();\r\n    }\r\n  };\r\n\r\n  const handleSearch = (query: string): void => {\r\n    if (query !== undefined) {\r\n      const request: microsoftTeams.bot.QueryRequest = {\r\n        query: query,\r\n        commandId: getCommandId(window.location.href),\r\n      };\r\n      getResults(request, onResults, onError);\r\n      setAppState(AppStateEnum.Loading);\r\n    }\r\n  };\r\n\r\n  const handleViewChange = (viewOption: string): void => {\r\n    if (viewOption) {\r\n      setViewOption(viewOption);\r\n    }\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.registerOnThemeChangeHandler(props.onThemeChange);\r\n    if (isInitialRun()) {\r\n      const request: microsoftTeams.bot.QueryRequest = {\r\n        query: '',\r\n        commandId: getCommandId(window.location.href),\r\n      };\r\n      getResults(request, onResults, onError);\r\n    }\r\n  }, [props.onThemeChange]);\r\n\r\n  let view = <Results results={Result} viewOption={ViewOption} />;\r\n  switch (AppState) {\r\n    case 'Loading':\r\n      view = <LoadIcon isLoading={true} />;\r\n      break;\r\n    case 'Error':\r\n      view = <ErrorView message={ErrorMessage} />;\r\n      break;\r\n    case 'Auth':\r\n      view = <AuthView title={AuthData.title} url={AuthData.url} />;\r\n      break;\r\n  }\r\n  return (\r\n    <div className={props.customClass}>\r\n      <SearchBar onSearch={handleSearch} onViewChange={handleViewChange} />\r\n      {view}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ContentViewWrapper = createComponent({\r\n  displayName: 'ContentViewWrapper',\r\n  render: ({ stardust, onThemeChange }) => {\r\n    const { classes } = stardust;\r\n    return <ContentView customClass={classes.root} onThemeChange={onThemeChange} />;\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { Loader } from '@stardust-ui/react';\r\nimport '../css/LoadIcon.css';\r\n\r\nexport interface LoadIconProps {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const LoadIcon: React.FC<LoadIconProps> = (props: LoadIconProps): JSX.Element => {\r\n  return <div className=\"loadIcon\"> {props.isLoading ? <Loader /> : null} </div>;\r\n};\r\n","import React from 'react';\r\nimport { Image, Text } from '@stardust-ui/react';\r\nimport '../css/ErrorView.css';\r\ninterface IErrorViewProps {\r\n  message: string;\r\n}\r\n\r\nexport const ErrorView: React.FC<IErrorViewProps> = (props: IErrorViewProps): JSX.Element => {\r\n  return (\r\n    <div className=\"ErrorView\">\r\n      <Image\r\n        styles={{\r\n          maxWidth: '37%',\r\n          margin: '0 auto',\r\n          display: 'block',\r\n          textAlign: 'center',\r\n          marginBottom: '10px',\r\n        }}\r\n        src=\"error.svg\"\r\n      />\r\n      <Text size=\"larger\" content={'Hmm... Something went wrong...'} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Text } from '@stardust-ui/react';\r\n\r\ninterface IAuthViewProps {\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\nexport const AuthView: React.FC<IAuthViewProps> = (props: IAuthViewProps): JSX.Element => {\r\n  return (\r\n    <>\r\n      <Text size={'large'} content={props.title} />\r\n      <Text\r\n        size={'medium'}\r\n        content={\r\n          <p>\r\n            You&apos;ll need to <a href={props.url}>sign in</a> to use this app.\r\n          </p>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import { themes, ThemeInput, mergeThemes } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes {\r\n  Dark = 'dark',\r\n  Default = 'default',\r\n  Contrast = 'contrast',\r\n}\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n\r\n  const themeString: string = url.query.theme as string;\r\n\r\n  if (!themeString) {\r\n    return 'default';\r\n  }\r\n  return themeString;\r\n};\r\n\r\n// gets theme type from string\r\nexport const getTheme = (theme: string): ThemeInput => {\r\n  const customTheme: ThemeInput = {\r\n    componentVariables: {\r\n      ContentViewWrapper: ({ colorScheme }: any) => ({\r\n        backgroundColor: colorScheme.default.background2,\r\n      }),\r\n      ListItem: ({ colorScheme }: any) => ({\r\n        backgroundColor: colorScheme.default.background,\r\n      }),\r\n    },\r\n    componentStyles: {\r\n      ContentViewWrapper: {\r\n        root: ({ variables }: any) => ({\r\n          backgroundColor: variables.backgroundColor,\r\n        }),\r\n      },\r\n      ListItem: {\r\n        root: ({ variables }: any) => ({\r\n          backgroundColor: variables.backgroundColor,\r\n        }),\r\n      },\r\n    },\r\n  };\r\n\r\n  const newTheme: ThemeInput = mergeThemes(themes.teams, customTheme);\r\n\r\n  switch (theme) {\r\n    case themeTypes.Contrast:\r\n      return themes.teamsHighContrast;\r\n    case themeTypes.Dark:\r\n      return themes.teamsDark;\r\n  }\r\n\r\n  return newTheme;\r\n};\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { getFrameContext } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\nimport { ContentViewWrapper } from './components/ContentView';\r\n\r\ninterface IAppProps {\r\n  onThemeChange: (theme: string) => void;\r\n}\r\n\r\nexport const App: React.FC<IAppProps> = (props: IAppProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const url: string = window.location.href;\r\n  const frameContext = getFrameContext(url);\r\n  if (frameContext === 'settings') {\r\n    return (\r\n      <div>\r\n        <SettingsView />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <ContentViewWrapper onThemeChange={props.onThemeChange} />;\r\n  }\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render(<ProviderWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Provider } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils';\r\n\r\nexport const ProviderWrapper: React.FC = (): JSX.Element => {\r\n  // CONSTANT\r\n  const initialTheme = themeUtils.getTheme(themeUtils.getThemeFromURL(window.location.href));\r\n  // HOOKS\r\n  const [Theme, setTheme] = React.useState(initialTheme);\r\n\r\n  // HANDLERS\r\n  const handleThemeChange = (theme: string): void => {\r\n    setTheme(themeUtils.getTheme(theme));\r\n  };\r\n\r\n  return (\r\n    <Provider theme={Theme}>\r\n      <App onThemeChange={handleThemeChange} />\r\n    </Provider>\r\n  );\r\n};\r\n"],"sourceRoot":""}